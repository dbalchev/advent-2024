{
	// Place your advent-2024 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New Day" : {
		"scope": "rust",
		"prefix": "new_day",
		"body": [
			"use std::fmt::Debug;",
			"",
			"use aoc_utils::{formatted_struct, DaySolution, MyResult};",
			"",
			"formatted_struct! {",
			"    #[derive(Debug)]",
			"    pub enum Instruction {",
			"        Set {",
			"            name:String,",
			"            \"=\",",
			"            value: i32,",
			"        },",
			"        Dash {",
			"            name: String,",
			"            \"-\",",
			"        },",
			"    }",
			"}",
			"",
			"formatted_struct! {",
			"    #[derive(Debug)]",
			"    pub struct InputFormat {",
			"        #[separated_by=\",\"]",
			"        instructions: Vec<Instruction>,",
			"    }",
			"}",
			"",
			"pub struct Solution;",
			"",
			"impl DaySolution for Solution {",
			"    type InputFormat = InputFormat;",
			"    fn solve_1(input: &InputFormat) -> MyResult<impl Debug + 'static> {",
			"        Ok(format!(\"Hello {:?}\", *input))",
			"    }",
			"}",

		]
	},
	"collect_vec": {
		"scope": "rust",
		"prefix": "collect_vec",
		"body": "collect::<Vec<_>>()",
	},
}